{"ast":null,"code":"var _jsxFileName = \"/Bharath/React/Chat App/src/store/themeContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useReducer } from 'react';\nimport { createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTheme = {\n  backgroundColor: \"black\",\n  color: \"white\"\n};\nexport const ThemeContext = /*#__PURE__*/createContext(initialTheme);\nexport const ThemeProvider = props => /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n  value: initialTheme,\n  children: props.children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 39\n}, this);\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(themeReducer, initialTheme); //  useContext(ThemeContext);\n\n  return {\n    state: useContext(ThemeContext),\n    dispatch\n  };\n};\n\n_s(useTheme, \"HP+vYthTewLPiREDdQude99x7Pg=\");\n\nconst themeReducer = (state = initialTheme, action) => {\n  console.log('Inside theme reducer ', action);\n\n  switch (action.type) {\n    case 'CHANGE_THEME':\n      return {\n        backgroundColor: \"white\",\n        color: \"black\"\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Bharath/React/Chat App/src/store/themeContext.js"],"names":["React","useContext","useReducer","createContext","initialTheme","backgroundColor","color","ThemeContext","ThemeProvider","props","children","useTheme","state","dispatch","themeReducer","action","console","log","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,SAASC,aAAT,QAA8B,OAA9B;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,eAAe,EAAE,OADA;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;AAKA,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,CAACC,YAAD,CAAlC;AAGP,OAAO,MAAMI,aAAa,GAAGC,KAAK,iBAAI,QAAC,YAAD,CAAc,QAAd;AAAuB,EAAA,KAAK,EAAEL,YAA9B;AAAA,YACjCK,KAAK,CAACC;AAD2B;AAAA;AAAA;AAAA;AAAA,QAA/B;KAAMF,a;AAIb,OAAO,MAAMG,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACY,YAAD,EAAeV,YAAf,CAApC,CAD0B,CAE1B;;AACA,SAAO;AAACQ,IAAAA,KAAK,EAAEX,UAAU,CAACM,YAAD,CAAlB;AAAkCM,IAAAA;AAAlC,GAAP;AACH,CAJM;;GAAMF,Q;;AAOb,MAAMG,YAAY,GAAG,CAACF,KAAK,GAAGR,YAAT,EAAuBW,MAAvB,KAAkC;AACnDC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCF,MAApC;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,cAAL;AAAqB,aAAO;AACxBb,QAAAA,eAAe,EAAE,OADO;AAExBC,QAAAA,KAAK,EAAE;AAFiB,OAAP;;AAIrB;AAAS,aAAO,EAAC,GAAGM;AAAJ,OAAP;AALb;AAOH,CATD","sourcesContent":["import React, { useContext, useReducer } from 'react';\nimport { createContext } from \"react\";\n\nconst initialTheme = {\n    backgroundColor: \"black\",\n    color: \"white\"\n}\n\nexport const ThemeContext = createContext(initialTheme);\n\n\nexport const ThemeProvider = props => <ThemeContext.Provider value={initialTheme}>\n    {props.children}\n</ThemeContext.Provider>\n\nexport const useTheme = () => {\n    const [state, dispatch] = useReducer(themeReducer, initialTheme)\n    //  useContext(ThemeContext);\n    return {state: useContext(ThemeContext), dispatch}\n}\n\n\nconst themeReducer = (state = initialTheme, action) => {\n    console.log('Inside theme reducer ',action)\n    switch (action.type) {\n        case 'CHANGE_THEME': return {\n            backgroundColor: \"white\",\n            color: \"black\"\n        }\n        default: return {...state}\n    }\n}"]},"metadata":{},"sourceType":"module"}