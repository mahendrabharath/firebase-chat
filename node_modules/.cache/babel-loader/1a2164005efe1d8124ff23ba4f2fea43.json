{"ast":null,"code":"import _objectSpread from\"/System/Volumes/Data/Bharath/React/Chat App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/System/Volumes/Data/Bharath/React/Chat App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from'react';import firebase from\"firebase/app\";import{withRouter}from\"react-router\";import{UserProfileContext}from'../../store/userContext';import{MessageContext}from'../../store/messageContext';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var ChatList=function ChatList(props){var db=firebase.firestore();var _useContext=useContext(MessageContext),dispatch=_useContext.dispatch;var _useContext2=useContext(UserProfileContext),userName=_useContext2.name,userID=_useContext2.userID;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),userList=_useState2[0],setUserList=_useState2[1];useEffect(function(){db.collection('users').get().then(function(querySnapshot){var result=querySnapshot.docs.map(function(doc){return _objectSpread(_objectSpread({},doc.data()),{},{id:doc.id});});setUserList(result);// console.log('users list ', result)\n}).catch(function(err){return console.log('Oops ',err);});},[db]);var setChatRoom=function setChatRoom(receiver){db.collection('users').doc(userID).collection('conversations').doc(receiver.id).get().then(function(querySnapshot){var receiverMessageFields=querySnapshot.data();if(querySnapshot.exists&&receiverMessageFields.reference){// if reference exists use the existing reference\ndispatch({type:'SET_MESSAGE_DOC_URL',payload:{path:receiverMessageFields.url}});}else{// if reference doesnt exist, then create a new document for message with sender's and receiver's user ID\nvar docURL=\"/users/\"+userID+\"/conversations/\"+receiver.id+\"/messages\";// adds reference collection to the receiver end.\ndb.collection('users').doc(receiver.id).collection('conversations').doc(userID).set({reference:true,url:docURL});dispatch({type:'SET_MESSAGE_DOC_URL',payload:{path:docURL}});}}).catch(function(err){return console.log('err ',err);});dispatch({type:'SET_RECEIVER_DETAILS',payload:{name:receiver.name,userName:receiver.name,userID:receiver.id}});};// console.log(userList)\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Welcome to chatroom \",userName]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:/*#__PURE__*/_jsx(\"ul\",{children:\"pick a contact u gotta talk\"})}),/*#__PURE__*/_jsx(\"div\",{children:userList.map(function(el,i){return/*#__PURE__*/_jsx(\"p\",{onClick:function onClick(e){return setChatRoom(el);},children:el.name},i);})})]})]});};export default withRouter(ChatList);","map":{"version":3,"sources":["/System/Volumes/Data/Bharath/React/Chat App/src/components/chat/chatList.js"],"names":["React","useContext","useEffect","useState","firebase","withRouter","UserProfileContext","MessageContext","ChatList","props","db","firestore","dispatch","userName","name","userID","userList","setUserList","collection","get","then","querySnapshot","result","docs","map","doc","data","id","catch","err","console","log","setChatRoom","receiver","receiverMessageFields","exists","reference","type","payload","path","url","docURL","set","el","i","e"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport firebase from \"firebase/app\";\nimport { withRouter } from \"react-router\";\nimport { UserProfileContext } from '../../store/userContext';\nimport { MessageContext } from '../../store/messageContext';\n\nconst ChatList = props => {\n    var db = firebase.firestore()\n    const { dispatch } = useContext(MessageContext);\n    const { name: userName, userID } = useContext(UserProfileContext);\n    const [userList, setUserList] = useState([]);\n\n    useEffect(() => {\n        db.collection('users').get().then((querySnapshot) => {\n            const result = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));\n            setUserList(result);\n            // console.log('users list ', result)\n        }).catch(err => console.log('Oops ', err))\n    }, [db])\n\n\n    const setChatRoom = (receiver) => {\n        db.collection('users').doc(userID).collection('conversations').doc(receiver.id).get().then(querySnapshot => {\n                const receiverMessageFields = querySnapshot.data();\n                if (querySnapshot.exists && receiverMessageFields.reference) { // if reference exists use the existing reference\n                dispatch({\n                    type: 'SET_MESSAGE_DOC_URL',\n                    payload: {\n                        path: receiverMessageFields.url\n                    }\n                })\n            } else { // if reference doesnt exist, then create a new document for message with sender's and receiver's user ID\n                const docURL = \"/users/\" + userID + \"/conversations/\" + receiver.id + \"/messages\";\n                // adds reference collection to the receiver end.\n                db.collection('users').doc(receiver.id).collection('conversations').doc(userID).set({\n                    reference: true,\n                    url: docURL\n                })\n                dispatch({\n                    type: 'SET_MESSAGE_DOC_URL',\n                    payload: {\n                        path: docURL\n                    }\n                })\n            }\n        }).catch(err => console.log('err ', err))\n        dispatch({\n            type: 'SET_RECEIVER_DETAILS',\n            payload: {\n                name: receiver.name,\n                userName: receiver.name,\n                userID: receiver.id\n            }\n        })\n    }\n\n    // console.log(userList)\n\n    return <div>\n        <h1>Welcome to chatroom {userName}</h1>\n        <div>\n            <h3><ul>pick a contact u gotta talk</ul></h3>\n            <div>{userList.map((el, i) => <p key={i} onClick={e => setChatRoom(el)}>{el.name}</p>)}</div>\n        </div>\n    </div>\n}\n\nexport default withRouter(ChatList);"]},"metadata":{},"sourceType":"module"}