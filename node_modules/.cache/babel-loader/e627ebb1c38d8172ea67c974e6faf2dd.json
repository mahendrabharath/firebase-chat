{"ast":null,"code":"var _jsxFileName = \"/System/Volumes/Data/Bharath/React/Chat App/src/components/chat/chatList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport firebase from \"firebase/app\";\nimport { withRouter } from \"react-router\";\nimport { UserProfileContext } from '../../store/userContext';\nimport { MessageContext } from '../../store/messageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatList = props => {\n  _s();\n\n  var db = firebase.firestore();\n  const {\n    dispatch\n  } = useContext(MessageContext);\n  const {\n    name: userName,\n    userID\n  } = useContext(UserProfileContext);\n  const [userList, setUserList] = useState([]);\n  useEffect(() => {\n    db.collection('users').get().then(querySnapshot => {\n      const result = querySnapshot.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      }));\n      setUserList(result); // console.log('users list ', result)\n    }).catch(err => console.log('Oops ', err));\n  }, [db]);\n\n  const setChatRoom = receiver => {\n    db.collection('users').doc(userID).collection('conversations').doc(receiver.id).get().then(querySnapshot => {\n      const receiverMessageFields = querySnapshot.data();\n\n      if (querySnapshot.exists && receiverMessageFields.reference) {\n        // if reference exists use the existing reference\n        dispatch({\n          type: 'SET_MESSAGE_DOC_URL',\n          payload: {\n            path: receiverMessageFields.url\n          }\n        });\n      } else {\n        // if reference doesnt exist, then create a new document for message with sender's and receiver's user ID\n        const docURL = \"/users/\" + userID + \"/conversations/\" + receiver.id + \"/messages\";\n        dispatch({\n          type: 'SET_MESSAGE_DOC_URL',\n          payload: {\n            path: docURL\n          }\n        });\n      }\n    }).catch(err => console.log('err ', err));\n    dispatch({\n      type: 'SET_RECEIVER_DETAILS',\n      payload: {\n        name: receiver.name,\n        userName: receiver.name,\n        userID: receiver.id\n      }\n    });\n  }; // console.log(userList)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome to chatroom \", userName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: \"pick a contact u gotta talk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: userList.map((el, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: e => setChatRoom(el),\n          children: el.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 43\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ChatList, \"vwshx/+Xmn6amKVJLGbHp/QAkxA=\");\n\n_c = ChatList;\nexport default _c2 = withRouter(ChatList);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChatList\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/System/Volumes/Data/Bharath/React/Chat App/src/components/chat/chatList.js"],"names":["React","useContext","useEffect","useState","firebase","withRouter","UserProfileContext","MessageContext","ChatList","props","db","firestore","dispatch","name","userName","userID","userList","setUserList","collection","get","then","querySnapshot","result","docs","map","doc","data","id","catch","err","console","log","setChatRoom","receiver","receiverMessageFields","exists","reference","type","payload","path","url","docURL","el","i","e"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport firebase from \"firebase/app\";\nimport { withRouter } from \"react-router\";\nimport { UserProfileContext } from '../../store/userContext';\nimport { MessageContext } from '../../store/messageContext';\n\nconst ChatList = props => {\n    var db = firebase.firestore()\n    const { dispatch } = useContext(MessageContext);\n    const { name: userName, userID } = useContext(UserProfileContext);\n    const [userList, setUserList] = useState([]);\n\n    useEffect(() => {\n        db.collection('users').get().then((querySnapshot) => {\n            const result = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));\n            setUserList(result);\n            // console.log('users list ', result)\n        }).catch(err => console.log('Oops ', err))\n    }, [db])\n\n\n    const setChatRoom = (receiver) => {\n        db.collection('users').doc(userID).collection('conversations').doc(receiver.id).get().then(querySnapshot => {\n                const receiverMessageFields = querySnapshot.data();\n                if (querySnapshot.exists && receiverMessageFields.reference) { // if reference exists use the existing reference\n                dispatch({\n                    type: 'SET_MESSAGE_DOC_URL',\n                    payload: {\n                        path: receiverMessageFields.url\n                    }\n                })\n            } else { // if reference doesnt exist, then create a new document for message with sender's and receiver's user ID\n                const docURL = \"/users/\" + userID + \"/conversations/\" + receiver.id + \"/messages\";\n                dispatch({\n                    type: 'SET_MESSAGE_DOC_URL',\n                    payload: {\n                        path: docURL\n                    }\n                })\n            }\n        }).catch(err => console.log('err ', err))\n        dispatch({\n            type: 'SET_RECEIVER_DETAILS',\n            payload: {\n                name: receiver.name,\n                userName: receiver.name,\n                userID: receiver.id\n            }\n        })\n    }\n\n    // console.log(userList)\n\n    return <div>\n        <h1>Welcome to chatroom {userName}</h1>\n        <div>\n            <h3><ul>pick a contact u gotta talk</ul></h3>\n            <div>{userList.map((el, i) => <p key={i} onClick={e => setChatRoom(el)}>{el.name}</p>)}</div>\n        </div>\n    </div>\n}\n\nexport default withRouter(ChatList);"]},"metadata":{},"sourceType":"module"}